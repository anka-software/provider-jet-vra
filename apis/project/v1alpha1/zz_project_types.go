/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdministratorRolesObservation struct {
}

type AdministratorRolesParameters struct {

	// The email of the user or name of the group.
	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// Type of the principal. Currently supported ‘user’ (default) and 'group’.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConstraintsObservation struct {
}

type ConstraintsParameters struct {

	// Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
	// +kubebuilder:validation:Optional
	Extensibility []ExtensibilityParameters `json:"extensibility,omitempty" tf:"extensibility,omitempty"`

	// Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
	// +kubebuilder:validation:Optional
	Storage []StorageParameters `json:"storage,omitempty" tf:"storage,omitempty"`
}

type ExtensibilityObservation struct {
}

type ExtensibilityParameters struct {

	// An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// Indicates whether this constraint should be strictly enforced or not.
	// +kubebuilder:validation:Required
	Mandatory *bool `json:"mandatory" tf:"mandatory,omitempty"`
}

type MemberRolesObservation struct {
}

type MemberRolesParameters struct {

	// The email of the user or name of the group.
	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// Type of the principal. Currently supported ‘user’ (default) and 'group’.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NetworkObservation struct {
}

type NetworkParameters struct {

	// An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// Indicates whether this constraint should be strictly enforced or not.
	// +kubebuilder:validation:Required
	Mandatory *bool `json:"mandatory" tf:"mandatory,omitempty"`
}

type ProjectObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProjectParameters struct {

	// List of administrator roles associated with the project. Only administrators can manage project's configuration.
	// +kubebuilder:validation:Optional
	AdministratorRoles []AdministratorRolesParameters `json:"administratorRoles,omitempty" tf:"administrator_roles,omitempty"`

	// List of administrator users associated with the project. Only administrators can manage project's configuration.
	// +kubebuilder:validation:Optional
	Administrators []*string `json:"administrators,omitempty" tf:"administrators,omitempty"`

	// List of storage, network and extensibility constraints to be applied when provisioning through this project.
	// +kubebuilder:validation:Optional
	Constraints []ConstraintsParameters `json:"constraints,omitempty" tf:"constraints,omitempty"`

	// The project custom properties which are added to all requests in this project
	// +kubebuilder:validation:Optional
	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// A human-friendly description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The naming template to be used for resources provisioned in this project.
	// +kubebuilder:validation:Optional
	MachineNamingTemplate *string `json:"machineNamingTemplate,omitempty" tf:"machine_naming_template,omitempty"`

	// List of member roles associated with the project.
	// +kubebuilder:validation:Optional
	MemberRoles []MemberRolesParameters `json:"memberRoles,omitempty" tf:"member_roles,omitempty"`

	// List of member users associated with the project.
	// +kubebuilder:validation:Optional
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// A human-friendly name used as an identifier in APIs that support this option.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The timeout that should be used for Blueprint operations and Provisioning tasks. The timeout is in seconds.
	// +kubebuilder:validation:Optional
	OperationTimeout *float64 `json:"operationTimeout,omitempty" tf:"operation_timeout,omitempty"`

	// The placement policy that will be applied when selecting a cloud zone for provisioning.
	// +kubebuilder:validation:Optional
	PlacementPolicy *string `json:"placementPolicy,omitempty" tf:"placement_policy,omitempty"`

	// Specifies whether the resources in this projects are shared or not. If not set default will be used.
	// +kubebuilder:validation:Optional
	SharedResources *bool `json:"sharedResources,omitempty" tf:"shared_resources,omitempty"`

	// List of viewer roles associated with the project.
	// +kubebuilder:validation:Optional
	ViewerRoles []ViewerRolesParameters `json:"viewerRoles,omitempty" tf:"viewer_roles,omitempty"`

	// List of viewer users associated with the project.
	// +kubebuilder:validation:Optional
	Viewers []*string `json:"viewers,omitempty" tf:"viewers,omitempty"`

	// List of configurations for zone assignment to a project.
	// +kubebuilder:validation:Optional
	ZoneAssignments []ZoneAssignmentsParameters `json:"zoneAssignments,omitempty" tf:"zone_assignments,omitempty"`
}

type StorageObservation struct {
}

type StorageParameters struct {

	// An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// Indicates whether this constraint should be strictly enforced or not.
	// +kubebuilder:validation:Required
	Mandatory *bool `json:"mandatory" tf:"mandatory,omitempty"`
}

type ViewerRolesObservation struct {
}

type ViewerRolesParameters struct {

	// The email of the user or name of the group.
	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// Type of the principal. Currently supported ‘user’ (default) and 'group’.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ZoneAssignmentsObservation struct {
}

type ZoneAssignmentsParameters struct {

	// The maximum amount of cpus that can be used by this cloud zone. Default is 0 (unlimited cpu).
	// +kubebuilder:validation:Optional
	CPULimit *float64 `json:"cpuLimit,omitempty" tf:"cpu_limit,omitempty"`

	// The maximum number of instances that can be provisioned in this cloud zone. Default is 0 (unlimited instances)
	// +kubebuilder:validation:Optional
	MaxInstances *float64 `json:"maxInstances,omitempty" tf:"max_instances,omitempty"`

	// The maximum amount of memory that can be used by this cloud zone. Default is 0 (unlimited memory).
	// +kubebuilder:validation:Optional
	MemoryLimitMb *float64 `json:"memoryLimitMb,omitempty" tf:"memory_limit_mb,omitempty"`

	// The priority of this zone in the current project. Lower numbers mean higher priority. Default is 0 (highest)
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Upper limit on storage that can be requested from a cloud zone which is part of this project. Default is 0 (unlimited storage). Supported only for vSphere cloud zones.
	// +kubebuilder:validation:Optional
	StorageLimitGb *float64 `json:"storageLimitGb,omitempty" tf:"storage_limit_gb,omitempty"`

	// The Cloud Zone Id
	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// ProjectSpec defines the desired state of Project
type ProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectParameters `json:"forProvider"`
}

// ProjectStatus defines the observed state of Project.
type ProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Project is the Schema for the Projects API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type Project struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectSpec   `json:"spec"`
	Status            ProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectList contains a list of Projects
type ProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Project `json:"items"`
}

// Repository type metadata.
var (
	Project_Kind             = "Project"
	Project_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Project_Kind}.String()
	Project_KindAPIVersion   = Project_Kind + "." + CRDGroupVersion.String()
	Project_GroupVersionKind = CRDGroupVersion.WithKind(Project_Kind)
)

func init() {
	SchemeBuilder.Register(&Project{}, &ProjectList{})
}

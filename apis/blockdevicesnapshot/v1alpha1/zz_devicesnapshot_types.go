/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceSnapshotObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsCurrent *bool `json:"isCurrent,omitempty" tf:"is_current,omitempty"`

	Links []LinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type DeviceSnapshotParameters struct {

	// +crossplane:generate:reference:type=Device
	// +kubebuilder:validation:Optional
	BlockDeviceID *string `json:"blockDeviceId,omitempty" tf:"block_device_id,omitempty"`

	// +kubebuilder:validation:Optional
	BlockDeviceIDRef *v1.Reference `json:"blockDeviceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	BlockDeviceIDSelector *v1.Selector `json:"blockDeviceIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

type LinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type LinksParameters struct {
}

// DeviceSnapshotSpec defines the desired state of DeviceSnapshot
type DeviceSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceSnapshotParameters `json:"forProvider"`
}

// DeviceSnapshotStatus defines the observed state of DeviceSnapshot.
type DeviceSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceSnapshot is the Schema for the DeviceSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type DeviceSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeviceSnapshotSpec   `json:"spec"`
	Status            DeviceSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceSnapshotList contains a list of DeviceSnapshots
type DeviceSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeviceSnapshot `json:"items"`
}

// Repository type metadata.
var (
	DeviceSnapshot_Kind             = "DeviceSnapshot"
	DeviceSnapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeviceSnapshot_Kind}.String()
	DeviceSnapshot_KindAPIVersion   = DeviceSnapshot_Kind + "." + CRDGroupVersion.String()
	DeviceSnapshot_GroupVersionKind = CRDGroupVersion.WithKind(DeviceSnapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&DeviceSnapshot{}, &DeviceSnapshotList{})
}

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkVsphereLinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type NetworkVsphereLinksParameters struct {
}

type NetworkVsphereObservation struct {
	CloudAccountIds []*string `json:"cloudAccountIds,omitempty" tf:"cloud_account_ids,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	CustomProperties map[string]*string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	ExternalRegionID *string `json:"externalRegionId,omitempty" tf:"external_region_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links []NetworkVsphereLinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type NetworkVsphereParameters struct {

	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// +kubebuilder:validation:Optional
	DNSSearchDomains []*string `json:"dnsSearchDomains,omitempty" tf:"dns_search_domains,omitempty"`

	// +kubebuilder:validation:Optional
	DNSServerAddresses []*string `json:"dnsServerAddresses,omitempty" tf:"dns_server_addresses,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultIPv6Gateway *string `json:"defaultIpv6Gateway,omitempty" tf:"default_ipv6_gateway,omitempty"`

	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6Cidr *string `json:"ipv6Cidr,omitempty" tf:"ipv6_cidr,omitempty"`

	// +kubebuilder:validation:Optional
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []NetworkVsphereTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type NetworkVsphereTagsObservation struct {
}

type NetworkVsphereTagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// NetworkVsphereSpec defines the desired state of NetworkVsphere
type NetworkVsphereSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkVsphereParameters `json:"forProvider"`
}

// NetworkVsphereStatus defines the observed state of NetworkVsphere.
type NetworkVsphereStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkVsphereObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkVsphere is the Schema for the NetworkVspheres API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type NetworkVsphere struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkVsphereSpec   `json:"spec"`
	Status            NetworkVsphereStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkVsphereList contains a list of NetworkVspheres
type NetworkVsphereList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkVsphere `json:"items"`
}

// Repository type metadata.
var (
	NetworkVsphere_Kind             = "NetworkVsphere"
	NetworkVsphere_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkVsphere_Kind}.String()
	NetworkVsphere_KindAPIVersion   = NetworkVsphere_Kind + "." + CRDGroupVersion.String()
	NetworkVsphere_GroupVersionKind = CRDGroupVersion.WithKind(NetworkVsphere_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkVsphere{}, &NetworkVsphereList{})
}

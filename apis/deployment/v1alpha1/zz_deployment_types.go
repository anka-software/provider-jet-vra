/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeploymentObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	Expense []ExpenseObservation `json:"expense,omitempty" tf:"expense,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InputsIncludingDefaults map[string]*string `json:"inputsIncludingDefaults,omitempty" tf:"inputs_including_defaults,omitempty"`

	LastRequest []LastRequestObservation `json:"lastRequest,omitempty" tf:"last_request,omitempty"`

	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty" tf:"last_updated_at,omitempty"`

	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty" tf:"last_updated_by,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	Project []ProjectObservation `json:"project,omitempty" tf:"project,omitempty"`

	Resources []ResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type DeploymentParameters struct {

	// +kubebuilder:validation:Optional
	BlueprintContent *string `json:"blueprintContent,omitempty" tf:"blueprint_content,omitempty"`

	// +kubebuilder:validation:Optional
	BlueprintID *string `json:"blueprintId,omitempty" tf:"blueprint_id,omitempty"`

	// +kubebuilder:validation:Optional
	BlueprintVersion *string `json:"blueprintVersion,omitempty" tf:"blueprint_version,omitempty"`

	// +kubebuilder:validation:Optional
	CatalogItemID *string `json:"catalogItemId,omitempty" tf:"catalog_item_id,omitempty"`

	// +kubebuilder:validation:Optional
	CatalogItemVersion *string `json:"catalogItemVersion,omitempty" tf:"catalog_item_version,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ExpandLastRequest *bool `json:"expandLastRequest,omitempty" tf:"expand_last_request,omitempty"`

	// +kubebuilder:validation:Optional
	ExpandProject *bool `json:"expandProject,omitempty" tf:"expand_project,omitempty"`

	// +kubebuilder:validation:Optional
	ExpandResources *bool `json:"expandResources,omitempty" tf:"expand_resources,omitempty"`

	// Inputs provided by the user. For inputs including those with default values, refer to inputs_including_defaults.
	// +kubebuilder:validation:Optional
	Inputs map[string]*string `json:"inputs,omitempty" tf:"inputs,omitempty"`

	// +kubebuilder:validation:Optional
	LeaseExpireAt *string `json:"leaseExpireAt,omitempty" tf:"lease_expire_at,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type ExpenseObservation struct {
	AdditionalExpense *float64 `json:"additionalExpense,omitempty" tf:"additional_expense,omitempty"`

	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	ComputeExpense *float64 `json:"computeExpense,omitempty" tf:"compute_expense,omitempty"`

	LastUpdateTime *string `json:"lastUpdateTime,omitempty" tf:"last_update_time,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	NetworkExpense *float64 `json:"networkExpense,omitempty" tf:"network_expense,omitempty"`

	StorageExpense *float64 `json:"storageExpense,omitempty" tf:"storage_expense,omitempty"`

	TotalExpense *float64 `json:"totalExpense,omitempty" tf:"total_expense,omitempty"`

	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type ExpenseParameters struct {
}

type LastRequestObservation struct {
	ActionID *string `json:"actionId,omitempty" tf:"action_id,omitempty"`

	ApprovedAt *string `json:"approvedAt,omitempty" tf:"approved_at,omitempty"`

	BlueprintID *string `json:"blueprintId,omitempty" tf:"blueprint_id,omitempty"`

	Cancelable *bool `json:"cancelable,omitempty" tf:"cancelable,omitempty"`

	CatalogItemID *string `json:"catalogItemId,omitempty" tf:"catalog_item_id,omitempty"`

	CompletedAt *string `json:"completedAt,omitempty" tf:"completed_at,omitempty"`

	CompletedTasks *float64 `json:"completedTasks,omitempty" tf:"completed_tasks,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	Details *string `json:"details,omitempty" tf:"details,omitempty"`

	Dismissed *bool `json:"dismissed,omitempty" tf:"dismissed,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InitializedAt *string `json:"initializedAt,omitempty" tf:"initialized_at,omitempty"`

	Inputs map[string]*string `json:"inputs,omitempty" tf:"inputs,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Outputs map[string]*string `json:"outputs,omitempty" tf:"outputs,omitempty"`

	RequestedBy *string `json:"requestedBy,omitempty" tf:"requested_by,omitempty"`

	ResourceIds []*string `json:"resourceIds,omitempty" tf:"resource_ids,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TotalTasks *float64 `json:"totalTasks,omitempty" tf:"total_tasks,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type LastRequestParameters struct {
}

type ProjectObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ProjectParameters struct {
}

type ResourcesExpenseObservation struct {
	AdditionalExpense *float64 `json:"additionalExpense,omitempty" tf:"additional_expense,omitempty"`

	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	ComputeExpense *float64 `json:"computeExpense,omitempty" tf:"compute_expense,omitempty"`

	LastUpdateTime *string `json:"lastUpdateTime,omitempty" tf:"last_update_time,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	NetworkExpense *float64 `json:"networkExpense,omitempty" tf:"network_expense,omitempty"`

	StorageExpense *float64 `json:"storageExpense,omitempty" tf:"storage_expense,omitempty"`

	TotalExpense *float64 `json:"totalExpense,omitempty" tf:"total_expense,omitempty"`

	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type ResourcesExpenseParameters struct {
}

type ResourcesObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	DependsOn []*string `json:"dependsOn,omitempty" tf:"depends_on,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Expense []ResourcesExpenseObservation `json:"expense,omitempty" tf:"expense,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PropertiesJSON *string `json:"propertiesJson,omitempty" tf:"properties_json,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	SyncStatus *string `json:"syncStatus,omitempty" tf:"sync_status,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ResourcesParameters struct {
}

// DeploymentSpec defines the desired state of Deployment
type DeploymentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeploymentParameters `json:"forProvider"`
}

// DeploymentStatus defines the observed state of Deployment.
type DeploymentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Deployment is the Schema for the Deployments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type Deployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeploymentSpec   `json:"spec"`
	Status            DeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeploymentList contains a list of Deployments
type DeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Deployment `json:"items"`
}

// Repository type metadata.
var (
	Deployment_Kind             = "Deployment"
	Deployment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Deployment_Kind}.String()
	Deployment_KindAPIVersion   = Deployment_Kind + "." + CRDGroupVersion.String()
	Deployment_GroupVersionKind = CRDGroupVersion.WithKind(Deployment_Kind)
)

func init() {
	SchemeBuilder.Register(&Deployment{}, &DeploymentList{})
}

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlockDeviceSnapshotLinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type BlockDeviceSnapshotLinksParameters struct {
}

type BlockDeviceSnapshotObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsCurrent *bool `json:"isCurrent,omitempty" tf:"is_current,omitempty"`

	Links []BlockDeviceSnapshotLinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type BlockDeviceSnapshotParameters struct {

	// +crossplane:generate:reference:type=BlockDevice
	// +kubebuilder:validation:Optional
	BlockDeviceID *string `json:"blockDeviceId,omitempty" tf:"block_device_id,omitempty"`

	// +kubebuilder:validation:Optional
	BlockDeviceIDRef *v1.Reference `json:"blockDeviceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	BlockDeviceIDSelector *v1.Selector `json:"blockDeviceIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

// BlockDeviceSnapshotSpec defines the desired state of BlockDeviceSnapshot
type BlockDeviceSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BlockDeviceSnapshotParameters `json:"forProvider"`
}

// BlockDeviceSnapshotStatus defines the observed state of BlockDeviceSnapshot.
type BlockDeviceSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BlockDeviceSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BlockDeviceSnapshot is the Schema for the BlockDeviceSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type BlockDeviceSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BlockDeviceSnapshotSpec   `json:"spec"`
	Status            BlockDeviceSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BlockDeviceSnapshotList contains a list of BlockDeviceSnapshots
type BlockDeviceSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BlockDeviceSnapshot `json:"items"`
}

// Repository type metadata.
var (
	BlockDeviceSnapshot_Kind             = "BlockDeviceSnapshot"
	BlockDeviceSnapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BlockDeviceSnapshot_Kind}.String()
	BlockDeviceSnapshot_KindAPIVersion   = BlockDeviceSnapshot_Kind + "." + CRDGroupVersion.String()
	BlockDeviceSnapshot_GroupVersionKind = CRDGroupVersion.WithKind(BlockDeviceSnapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&BlockDeviceSnapshot{}, &BlockDeviceSnapshotList{})
}

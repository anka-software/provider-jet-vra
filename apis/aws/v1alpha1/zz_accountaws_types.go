/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountAwsObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links []LinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type AccountAwsParameters struct {

	// Aws Access key ID.
	// +kubebuilder:validation:Required
	AccessKey *string `json:"accessKey" tf:"access_key,omitempty"`

	// A human-friendly description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of this resource instance.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The set of region ids that will be enabled for this cloud account.
	// +kubebuilder:validation:Required
	Regions []*string `json:"regions" tf:"regions,omitempty"`

	// Aws Secret Access Key.
	// +kubebuilder:validation:Required
	SecretKeySecretRef v1.SecretKeySelector `json:"secretKeySecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type LinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type LinksParameters struct {
}

type TagsObservation struct {
}

type TagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// AccountAwsSpec defines the desired state of AccountAws
type AccountAwsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountAwsParameters `json:"forProvider"`
}

// AccountAwsStatus defines the observed state of AccountAws.
type AccountAwsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountAwsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccountAws is the Schema for the AccountAwss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type AccountAws struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccountAwsSpec   `json:"spec"`
	Status            AccountAwsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountAwsList contains a list of AccountAwss
type AccountAwsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountAws `json:"items"`
}

// Repository type metadata.
var (
	AccountAws_Kind             = "AccountAws"
	AccountAws_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountAws_Kind}.String()
	AccountAws_KindAPIVersion   = AccountAws_Kind + "." + CRDGroupVersion.String()
	AccountAws_GroupVersionKind = CRDGroupVersion.WithKind(AccountAws_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountAws{}, &AccountAwsList{})
}

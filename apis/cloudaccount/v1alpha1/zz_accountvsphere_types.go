/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountVsphereLinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type AccountVsphereLinksParameters struct {
}

type AccountVsphereObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links []AccountVsphereLinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type AccountVsphereParameters struct {

	// Whether to accept self signed certificate when connecting to the vCenter Server.
	// +kubebuilder:validation:Optional
	AcceptSelfSignedCert *bool `json:"acceptSelfSignedCert,omitempty" tf:"accept_self_signed_cert,omitempty"`

	// NSX-V or NSX-T account ids to associate with this vSphere cloud account.
	// +kubebuilder:validation:Optional
	AssociatedCloudAccountIds []*string `json:"associatedCloudAccountIds,omitempty" tf:"associated_cloud_account_ids,omitempty"`

	// Identifier of a data collector vm deployed in the on premise infrastructure.
	// +kubebuilder:validation:Optional
	Dcid *string `json:"dcid,omitempty" tf:"dcid,omitempty"`

	// A human-friendly description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IP address or FQDN of the vCenter Server.
	// +kubebuilder:validation:Required
	Hostname *string `json:"hostname" tf:"hostname,omitempty"`

	// The name of this resource instance.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Password of the vCenter Server.
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The set of region ids that will be enabled for this cloud account.
	// +kubebuilder:validation:Required
	Regions []*string `json:"regions" tf:"regions,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []AccountVsphereTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// Username of the vCenter Server.
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type AccountVsphereTagsObservation struct {
}

type AccountVsphereTagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// AccountVsphereSpec defines the desired state of AccountVsphere
type AccountVsphereSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountVsphereParameters `json:"forProvider"`
}

// AccountVsphereStatus defines the observed state of AccountVsphere.
type AccountVsphereStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountVsphereObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccountVsphere is the Schema for the AccountVspheres API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type AccountVsphere struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccountVsphereSpec   `json:"spec"`
	Status            AccountVsphereStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountVsphereList contains a list of AccountVspheres
type AccountVsphereList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountVsphere `json:"items"`
}

// Repository type metadata.
var (
	AccountVsphere_Kind             = "AccountVsphere"
	AccountVsphere_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountVsphere_Kind}.String()
	AccountVsphere_KindAPIVersion   = AccountVsphere_Kind + "." + CRDGroupVersion.String()
	AccountVsphere_GroupVersionKind = CRDGroupVersion.WithKind(AccountVsphere_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountVsphere{}, &AccountVsphereList{})
}

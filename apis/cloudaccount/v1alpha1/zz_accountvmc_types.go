/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountVmcLinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type AccountVmcLinksParameters struct {
}

type AccountVmcObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links []AccountVmcLinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type AccountVmcParameters struct {

	// +kubebuilder:validation:Required
	APIToken *string `json:"apiToken" tf:"api_token,omitempty"`

	// Whether to accept self signed certificate when connecting to the vCenter Server.
	// +kubebuilder:validation:Optional
	AcceptSelfSignedCert *bool `json:"acceptSelfSignedCert,omitempty" tf:"accept_self_signed_cert,omitempty"`

	// Identifier of a data collector vm deployed in the on premise infrastructure.
	// +kubebuilder:validation:Optional
	DcID *string `json:"dcId,omitempty" tf:"dc_id,omitempty"`

	// A human-friendly description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of this resource instance.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	NsxHostname *string `json:"nsxHostname" tf:"nsx_hostname,omitempty"`

	// The set of region ids that will be enabled for this cloud account.
	// +kubebuilder:validation:Required
	Regions []*string `json:"regions" tf:"regions,omitempty"`

	// +kubebuilder:validation:Required
	SddcName *string `json:"sddcName" tf:"sddc_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []AccountVmcTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VcenterHostname *string `json:"vcenterHostname" tf:"vcenter_hostname,omitempty"`

	// +kubebuilder:validation:Required
	VcenterPasswordSecretRef v1.SecretKeySelector `json:"vcenterPasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	VcenterUsername *string `json:"vcenterUsername" tf:"vcenter_username,omitempty"`
}

type AccountVmcTagsObservation struct {
}

type AccountVmcTagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// AccountVmcSpec defines the desired state of AccountVmc
type AccountVmcSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountVmcParameters `json:"forProvider"`
}

// AccountVmcStatus defines the observed state of AccountVmc.
type AccountVmcStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountVmcObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccountVmc is the Schema for the AccountVmcs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type AccountVmc struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccountVmcSpec   `json:"spec"`
	Status            AccountVmcStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountVmcList contains a list of AccountVmcs
type AccountVmcList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountVmc `json:"items"`
}

// Repository type metadata.
var (
	AccountVmc_Kind             = "AccountVmc"
	AccountVmc_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountVmc_Kind}.String()
	AccountVmc_KindAPIVersion   = AccountVmc_Kind + "." + CRDGroupVersion.String()
	AccountVmc_GroupVersionKind = CRDGroupVersion.WithKind(AccountVmc_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountVmc{}, &AccountVmcList{})
}

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPRangeLinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type IPRangeLinksParameters struct {
}

type IPRangeObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links []IPRangeLinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type IPRangeParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	EndIPAddress *string `json:"endIpAddress" tf:"end_ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	FabricNetworkID *string `json:"fabricNetworkId,omitempty" tf:"fabric_network_id,omitempty"`

	// +kubebuilder:validation:Required
	IPVersion *string `json:"ipVersion" tf:"ip_version,omitempty"`

	// +kubebuilder:validation:Required
	StartIPAddress *string `json:"startIpAddress" tf:"start_ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []IPRangeTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type IPRangeTagsObservation struct {
}

type IPRangeTagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// IPRangeSpec defines the desired state of IPRange
type IPRangeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPRangeParameters `json:"forProvider"`
}

// IPRangeStatus defines the observed state of IPRange.
type IPRangeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPRangeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IPRange is the Schema for the IPRanges API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type IPRange struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IPRangeSpec   `json:"spec"`
	Status            IPRangeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPRangeList contains a list of IPRanges
type IPRangeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPRange `json:"items"`
}

// Repository type metadata.
var (
	IPRange_Kind             = "IPRange"
	IPRange_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPRange_Kind}.String()
	IPRange_KindAPIVersion   = IPRange_Kind + "." + CRDGroupVersion.String()
	IPRange_GroupVersionKind = CRDGroupVersion.WithKind(IPRange_Kind)
)

func init() {
	SchemeBuilder.Register(&IPRange{}, &IPRangeList{})
}

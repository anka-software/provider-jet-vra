/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SourceBlueprintObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	Global *bool `json:"global,omitempty" tf:"global,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ItemsFound *string `json:"itemsFound,omitempty" tf:"items_found,omitempty"`

	ItemsImported *string `json:"itemsImported,omitempty" tf:"items_imported,omitempty"`

	LastImportCompletedAt *string `json:"lastImportCompletedAt,omitempty" tf:"last_import_completed_at,omitempty"`

	LastImportErrors []*string `json:"lastImportErrors,omitempty" tf:"last_import_errors,omitempty"`

	LastImportStartedAt *string `json:"lastImportStartedAt,omitempty" tf:"last_import_started_at,omitempty"`

	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty" tf:"last_updated_by,omitempty"`

	TypeID *string `json:"typeId,omitempty" tf:"type_id,omitempty"`
}

type SourceBlueprintParameters struct {

	// +kubebuilder:validation:Optional
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

// SourceBlueprintSpec defines the desired state of SourceBlueprint
type SourceBlueprintSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SourceBlueprintParameters `json:"forProvider"`
}

// SourceBlueprintStatus defines the observed state of SourceBlueprint.
type SourceBlueprintStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SourceBlueprintObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SourceBlueprint is the Schema for the SourceBlueprints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type SourceBlueprint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SourceBlueprintSpec   `json:"spec"`
	Status            SourceBlueprintStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SourceBlueprintList contains a list of SourceBlueprints
type SourceBlueprintList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SourceBlueprint `json:"items"`
}

// Repository type metadata.
var (
	SourceBlueprint_Kind             = "SourceBlueprint"
	SourceBlueprint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SourceBlueprint_Kind}.String()
	SourceBlueprint_KindAPIVersion   = SourceBlueprint_Kind + "." + CRDGroupVersion.String()
	SourceBlueprint_GroupVersionKind = CRDGroupVersion.WithKind(SourceBlueprint_Kind)
)

func init() {
	SchemeBuilder.Register(&SourceBlueprint{}, &SourceBlueprintList{})
}

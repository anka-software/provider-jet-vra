/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProfileVsphereLinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type ProfileVsphereLinksParameters struct {
}

type ProfileVsphereObservation struct {
	CloudAccountID *string `json:"cloudAccountId,omitempty" tf:"cloud_account_id,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ExternalRegionID *string `json:"externalRegionId,omitempty" tf:"external_region_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links []ProfileVsphereLinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ProfileVsphereParameters struct {

	// Id of the vSphere Datastore for placing disk and VM.
	// +kubebuilder:validation:Optional
	DatastoreID *string `json:"datastoreId,omitempty" tf:"datastore_id,omitempty"`

	// Indicates if a storage profile acts as a default storage profile for a disk.
	// +kubebuilder:validation:Required
	DefaultItem *bool `json:"defaultItem" tf:"default_item,omitempty"`

	// A human-friendly description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Type of mode for the disk. Omitting this value will set it to dependent. example: dependent / independent-persistent / independent-nonpersistent.
	// +kubebuilder:validation:Optional
	DiskMode *string `json:"diskMode,omitempty" tf:"disk_mode,omitempty"`

	// Disk types are specified as standard or first class, empty value is considered as standard.
	// +kubebuilder:validation:Optional
	DiskType *string `json:"diskType,omitempty" tf:"disk_type,omitempty"`

	// The upper bound for the I/O operations per second allocated for each virtual disk.
	// +kubebuilder:validation:Optional
	LimitIops *string `json:"limitIops,omitempty" tf:"limit_iops,omitempty"`

	// A human-friendly name used as an identifier in APIs that support this option.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Type of provisioning policy for the disk.
	// +kubebuilder:validation:Optional
	ProvisioningType *string `json:"provisioningType,omitempty" tf:"provisioning_type,omitempty"`

	// The Id of the region that is associated with the storage profile.
	// +kubebuilder:validation:Required
	RegionID *string `json:"regionId" tf:"region_id,omitempty"`

	// A specific number of shares assigned to each virtual machine.
	// +kubebuilder:validation:Optional
	Shares *string `json:"shares,omitempty" tf:"shares,omitempty"`

	// Indicates whether this storage profile supports encryption or not.
	// +kubebuilder:validation:Optional
	SharesLevel *string `json:"sharesLevel,omitempty" tf:"shares_level,omitempty"`

	// Id of the vSphere Storage Policy to be applied.
	// +kubebuilder:validation:Optional
	StoragePolicyID *string `json:"storagePolicyId,omitempty" tf:"storage_policy_id,omitempty"`

	// Indicates whether this storage profile supports encryption or not.
	// +kubebuilder:validation:Optional
	SupportsEncryption *bool `json:"supportsEncryption,omitempty" tf:"supports_encryption,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []ProfileVsphereTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ProfileVsphereTagsObservation struct {
}

type ProfileVsphereTagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// ProfileVsphereSpec defines the desired state of ProfileVsphere
type ProfileVsphereSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProfileVsphereParameters `json:"forProvider"`
}

// ProfileVsphereStatus defines the observed state of ProfileVsphere.
type ProfileVsphereStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProfileVsphereObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProfileVsphere is the Schema for the ProfileVspheres API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type ProfileVsphere struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProfileVsphereSpec   `json:"spec"`
	Status            ProfileVsphereStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProfileVsphereList contains a list of ProfileVspheres
type ProfileVsphereList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProfileVsphere `json:"items"`
}

// Repository type metadata.
var (
	ProfileVsphere_Kind             = "ProfileVsphere"
	ProfileVsphere_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProfileVsphere_Kind}.String()
	ProfileVsphere_KindAPIVersion   = ProfileVsphere_Kind + "." + CRDGroupVersion.String()
	ProfileVsphere_GroupVersionKind = CRDGroupVersion.WithKind(ProfileVsphere_Kind)
)

func init() {
	SchemeBuilder.Register(&ProfileVsphere{}, &ProfileVsphereList{})
}

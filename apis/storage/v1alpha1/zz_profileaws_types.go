/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProfileAwsLinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Hrefs []*string `json:"hrefs,omitempty" tf:"hrefs,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type ProfileAwsLinksParameters struct {
}

type ProfileAwsObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ExternalRegionID *string `json:"externalRegionId,omitempty" tf:"external_region_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links []ProfileAwsLinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ProfileAwsParameters struct {

	// +kubebuilder:validation:Required
	DefaultItem *bool `json:"defaultItem" tf:"default_item,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DeviceType *string `json:"deviceType,omitempty" tf:"device_type,omitempty"`

	// +kubebuilder:validation:Optional
	Iops *string `json:"iops,omitempty" tf:"iops,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	RegionID *string `json:"regionId" tf:"region_id,omitempty"`

	// +kubebuilder:validation:Optional
	SupportsEncryption *bool `json:"supportsEncryption,omitempty" tf:"supports_encryption,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []ProfileAwsTagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type ProfileAwsTagsObservation struct {
}

type ProfileAwsTagsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// ProfileAwsSpec defines the desired state of ProfileAws
type ProfileAwsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProfileAwsParameters `json:"forProvider"`
}

// ProfileAwsStatus defines the observed state of ProfileAws.
type ProfileAwsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProfileAwsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProfileAws is the Schema for the ProfileAwss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type ProfileAws struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProfileAwsSpec   `json:"spec"`
	Status            ProfileAwsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProfileAwsList contains a list of ProfileAwss
type ProfileAwsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProfileAws `json:"items"`
}

// Repository type metadata.
var (
	ProfileAws_Kind             = "ProfileAws"
	ProfileAws_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProfileAws_Kind}.String()
	ProfileAws_KindAPIVersion   = ProfileAws_Kind + "." + CRDGroupVersion.String()
	ProfileAws_GroupVersionKind = CRDGroupVersion.WithKind(ProfileAws_Kind)
)

func init() {
	SchemeBuilder.Register(&ProfileAws{}, &ProfileAwsList{})
}

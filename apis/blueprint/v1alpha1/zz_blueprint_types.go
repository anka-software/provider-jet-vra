/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlueprintObservation struct {
	ContentSourceID *string `json:"contentSourceId,omitempty" tf:"content_source_id,omitempty"`

	ContentSourcePath *string `json:"contentSourcePath,omitempty" tf:"content_source_path,omitempty"`

	ContentSourceSyncAt *string `json:"contentSourceSyncAt,omitempty" tf:"content_source_sync_at,omitempty"`

	ContentSourceSyncMessages []*string `json:"contentSourceSyncMessages,omitempty" tf:"content_source_sync_messages,omitempty"`

	ContentSourceSyncStatus *string `json:"contentSourceSyncStatus,omitempty" tf:"content_source_sync_status,omitempty"`

	ContentSourceType *string `json:"contentSourceType,omitempty" tf:"content_source_type,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TotalReleasedVersions *float64 `json:"totalReleasedVersions,omitempty" tf:"total_released_versions,omitempty"`

	TotalVersions *float64 `json:"totalVersions,omitempty" tf:"total_versions,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by,omitempty"`

	Valid *bool `json:"valid,omitempty" tf:"valid,omitempty"`

	ValidationMessages []ValidationMessagesObservation `json:"validationMessages,omitempty" tf:"validation_messages,omitempty"`
}

type BlueprintParameters struct {

	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// Flag to indicate blueprint can be requested from any project in org
	// +kubebuilder:validation:Optional
	RequestScopeOrg *bool `json:"requestScopeOrg,omitempty" tf:"request_scope_org,omitempty"`
}

type ValidationMessagesObservation struct {
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ValidationMessagesParameters struct {
}

// BlueprintSpec defines the desired state of Blueprint
type BlueprintSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BlueprintParameters `json:"forProvider"`
}

// BlueprintStatus defines the observed state of Blueprint.
type BlueprintStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BlueprintObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Blueprint is the Schema for the Blueprints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vrajet}
type Blueprint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BlueprintSpec   `json:"spec"`
	Status            BlueprintStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BlueprintList contains a list of Blueprints
type BlueprintList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Blueprint `json:"items"`
}

// Repository type metadata.
var (
	Blueprint_Kind             = "Blueprint"
	Blueprint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Blueprint_Kind}.String()
	Blueprint_KindAPIVersion   = Blueprint_Kind + "." + CRDGroupVersion.String()
	Blueprint_GroupVersionKind = CRDGroupVersion.WithKind(Blueprint_Kind)
)

func init() {
	SchemeBuilder.Register(&Blueprint{}, &BlueprintList{})
}
